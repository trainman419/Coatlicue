#!/usr/bin/env python

import json
import sys
import random

use_magic = False

# take a string and execute it as a series of function calls
def call(string, state):
   functions = {'no': lambda arg: arg == 0,
         'not': lambda arg: not arg,
         'use_magic': lambda arg: use_magic }
   args = string.split(' ')
   # temporary argument; already evaluated
   arg = args.pop()
   if arg in state:
      arg = state[arg]
   else:
      #print "WARNING: %s is not a variable; assuming string literal"%(arg)
      # Assume aregument is undefined
      state[arg] = 0
      arg = 0

   while len(args) > 0:
      fun = args.pop()
      if fun in functions:
         arg = functions[fun](arg)
      else:
         print "ERROR: tried to call undefined function %s"%(fun)
         return False
   return arg

# Run one level of conditionals
# return the number of statements consumed, and the block that should be run
#  as a result of this conditional (or None if the conditional evaluated to
#  false and did not have a default section)
def run_conditionals(sequence, state):
   i = 0
   ret = None
   match = False

   parts = []

   parts.append(sequence[i])
   i = 1
   while i < len(sequence) and (
         sequence[i]['type'] == 'condition_call' or 
         sequence[i]['type'] == 'condition_fallback'):
      parts.append(sequence[i])
      i += 1

   for p in parts:
      c = p['content']
      # call can handle raw variables names as well as functions
      #  this eliminates the need to disabiguate between fallback options
      #  that are calls vs variables, since this isn't specified in the 
      #  parse tree
      if call(c, state):
         match = True
         ret = p['children']
         break

   if i < len(sequence) and sequence[i]['type'] == 'condition_default':
      if not match:
         ret = sequence[i]['children']
      i += 1

   return (i, ret)

# Present the user with a set of choices and execute the result
def run_choices(choices, state):
   # Print the choices
   for i,c in enumerate(choices):
      print "%d) %s"%(i+1, c['content'])
   print

   # Get input from the user. Prompt them until the give us an answer we like
   i = None
   while i is None:
      try:
         i = int(raw_input('> '))
      except ValueError:
         i = 0
      if i < 1 or i > len(choices):
         print "Please enter a number between 1 and %d"%(len(choices))
         i = None

   # Do the thing specified by the user
   ret = None
   choice = choices[i-1]
   # empty the list without assigning an empty list, so that a higher
   #  invocation will see our changes
   while len(choices):
      choices.pop()
   if 'children' in choice:
      ret = run_section(choice['children'], state, choices = choices)
   return ret

# Pick a random thing and do it
def run_random(randoms, state):
   c = random.choice(randoms)
   return run_section([c], state)

def run_section(sequence, state, start = None, choices = [], randoms = []):
   i = 0
   if start:
      i = start[0]
      if len(start) > 1:
         ret = run_section(sequence[i]['children'], state, start[1:], choices,
               randoms)
         if ret:
            return ret
         else:
            i += 1

   while i < len(sequence):
      j = 1
      part = sequence[i]
      ret = None

      if part['type'].startswith('condition'):
         (j, blocks) = run_conditionals(sequence[i:], state)
         if blocks:
            ret = run_section(blocks, state, choices = choices, 
                  randoms = randoms)

      elif len(choices) > 0 and part['type'] != 'choice':
         j = 0
         ret = run_choices(choices, state)

      elif len(randoms) > 0 and part['type'] != 'random_block':
         j = 0
         ret = run_random(randoms, state)
         # empty the list without assigning an empty list, so that a higher
         #  invocation will see our changes
         while len(randoms):
            randoms.pop()

      elif part['type'] == 'random_block':
         randoms.append(part)

      elif part['type'] == 'choice':
         choices.append(part)

      elif part['type'] in ['descriptive', 'narration', 'action', 'comment']:
         print part['content']
         print

      elif part['type'] == 'speech':
         print "%s: %s"%(part['actor'], part['content'])
         print

      elif part['type'] == 'sequence':
         if 'children' in part:
            ret = run_section(part['children'], state, choices = choices, 
                  randoms = randoms)

      elif part['type'] == 'link':
         ret = part['jump']

      elif part['type'] == 'assignment':
         var = None
         value = None

         if 'variable' in part and 'value' in part:
            var = part['variable']
            value = part['value']
         else:
            parts = part['content'].split(' ')
            var = parts[0]
            if var.endswith(':'):
               var = var[:-1]
            value = parts[1]

         try:
            value = int(value)
         except ValueError:
            pass
         state[var] = value

      elif part['type'] == 'increment':
         state[part['variable']] += 1

      elif part['type'] == 'decrement':
         state[part['variable']] -= 1

      else:
         print "ERROR: Unknown type %s"%(part['type'])

      if ret:
         return ret
      
      i += j

   return None

def add_jumps(block, jumps, path):
   for i, b in enumerate(block):
      p = path[:]
      p.append(i)
      if b['type'] == 'sequence':
         jumps[b['content']] = p
      if 'children' in b:
         add_jumps(b['children'], jumps, p)


if __name__ == '__main__':
   if len(sys.argv) != 2:
      print "Usage: interpreter.py <json>"
      sys.exit(0)

   f = sys.argv[1]
   data = json.load(open(f))

   # build a jump table
   jump = {}

   add_jumps(data['main'], jump, [])

   if not 'main' in jump:
      print "No main section found; aborting"
      sys.exit(1)

   state = {}

   try:
      choices = []
      randoms = []
      n = run_section(data['main'], state, jump['main'], choices, randoms)
      while n or len(choices) > 0 or len(randoms) > 0:
         if len(choices) > 0:
            n = run_choices(choices, state)
         if len(randoms) > 0:
            n = run_random(randoms, state)
            randoms = []
         if n:
            n = run_section(data['main'], state, jump[n], choices, randoms)
   except KeyboardInterrupt:
      print "Done"
